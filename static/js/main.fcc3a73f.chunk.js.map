{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["RandCom","props","state","quote","author","index","changeQuote","bind","newAuthor","this","setState","Math","floor","random","firstQuote","firstAuthor","body","email","className","id","onChange","value","href","target","rel","onClick","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"iPAwFeA,G,wDAlFb,WAAYC,GAAO,IAAD,8BAChB,cAAMA,IACDC,MAAO,CACVC,MAAO,GACPC,OAAQ,GACRC,MAAM,GAER,EAAKC,YAAc,EAAKA,YAAYC,KAAjB,gBACnB,EAAKC,UAAY,EAAKA,UAAUD,KAAf,gBARD,E,0DAWhBE,KAAKC,SAAS,CACZP,MAAOM,KAAKP,MAAMC,MAClBC,OAAQK,KAAKP,MAAME,OACnBC,MAAOM,KAAKC,MAAoB,GAAdD,KAAKE,c,kCAIzBJ,KAAKC,SAAS,CACZP,MAAOM,KAAKP,MAAMC,MAClBC,OAAQK,KAAKP,MAAME,W,+BAKrB,IAwBIU,EAxBc,CAChB,6MACA,+CACA,kGACA,iCACA,8GACA,sDACA,2JACA,yGACA,8DACA,oDAcyBL,KAAKP,MAAMG,OAClCU,EAba,CACf,iBACA,cACA,kBACA,cACA,oBACA,wBACA,oBACA,YACA,WACA,kBAGyBN,KAAKP,MAAMG,OAKtC,OAHES,EAAaA,GAAcA,EAAWE,KACtCD,EAAcA,GAAeA,EAAYE,MAGzC,yBAAKC,UAAU,kBAAkBC,GAAG,aAClC,yBAAKD,UAAU,cACb,uBAAGA,UAAU,qBAAuB,0BAAMC,GAAG,OAAOC,SAAUX,KAAKH,YAAae,MAAOZ,KAAKP,MAAMC,OAAQW,IAE5G,yBAAKI,UAAU,gBAAf,KACI,0BAAMC,GAAG,SAASC,SAAUX,KAAKD,UAAWa,MAAOZ,KAAKP,MAAME,QAASW,IAE3E,yBAAKG,UAAU,OACb,uBAAGI,KAAK,kEAAkEH,GAAG,cAAcI,OAAO,SAASC,IAAI,uBAC7G,yBAAKN,UAAU,YACb,4BAAQA,UAAU,mBAChB,uBAAGA,UAAU,kBADf,YAKJ,yBAAKA,UAAU,WAAWC,GAAG,WAC3B,4BAAQD,UAAU,kBAAkBC,GAAG,YAAYM,QAAShB,KAAKH,aAC/D,uBAAGY,UAAU,sBADf,qB,GAzEUQ,IAAMC,YCORC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAAYC,SAASC,eAAe,SD6H9C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.fcc3a73f.chunk.js","sourcesContent":["import React from 'react';\n//import logo from './logo.svg';\nimport './App.css';\n\n\nclass RandCom extends React.Component{\n  constructor(props){\n    super(props);\n    this.state ={\n      quote: '',\n      author: '',\n      index:0\n    }\n    this.changeQuote = this.changeQuote.bind(this);\n    this.newAuthor = this.newAuthor.bind(this);\n  }\n  changeQuote(){\n    this.setState({\n      quote: this.state.quote,\n      author: this.state.author,\n      index: Math.floor(Math.random()*10)\n    });\n  }\n  newAuthor(){\n    this.setState({\n      quote: this.state.quote,\n      author: this.state.author\n    });\n  }\n  \n  render(){\n    const randQuote = [\n      \"I'm selfish, impatient and a little insecure. I make mistakes, I am out of control and at times hard to handle. But if you can't handle me at my worst, then you sure as hell don't deserve me at my best.\",\n      \"Be yourself; everyone else is already taken.\",\n      \"Two things are infinite: the universe and human stupidity; and I'm not sure about the universe.\",\n      \"So many books, so little time.\",\n      \"Be who you are and say what you feel, because those who mind don't matter, and those who matter don't mind.\",\n      \"A room without books is like a body without a soul.\",\n      \"You've gotta dance like there's nobody watching, Love like you'll never be hurt, Sing like there's nobody listening, And live like it's heaven on earth.\",\n      \"You know you're in love when you can't fall asleep because reality is finally better than your dreams.\",\n      \"You only live once, but if you do it right, once is enough.\",\n      \"Be the change that you wish to see in the world.\",\n    ];\n    const randAuth = [\n      \"Marilyn Monroe\",\n      \"Oscar Wilde\",\n      \"Albert Einstein\",\n      \"Frank Zappa\",\n      \"Bernard M. Baruch\",\n      \"Marcus Tullius Cicero\",\n      \"William W. Purkey\",\n      \"Dr. Seuss\",\n      \"Mae West\",\n      \"Mahatma Gandhi\"\n    ];\n    var firstQuote = randQuote[this.state.index];\n    var firstAuthor = randAuth[this.state.index];\n    \n      firstQuote = firstQuote && firstQuote.body;\n      firstAuthor = firstAuthor && firstAuthor.email;\n    \n    return (\n      <div className=\"container-fluid\" id=\"quote-box\">\n        <div className=\"quote-text\">\n          <i className=\"fa fa-quote-left\"></i><span id=\"text\" onChange={this.changeQuote} value={this.state.quote}>{firstQuote}</span>\n        </div>\n        <div className=\"quote-author\">\n          - <span id=\"author\" onChange={this.newAuthor} value={this.state.author}>{firstAuthor}</span>\n        </div>\n        <div className=\"row\">\n          <a href=\"https://twitter.com/intent/tweet?text=${firstQuote.firstAuthor}\" id=\"tweet-quote\" target=\"_blank\" rel=\"noopener noreferrer\">\n            <div className=\"col-xs-6\">\n              <button className=\"btn btn-default\">\n                <i className=\"fa fa-twitter\"></i> Tweet\n              </button>\n            </div>\n          </a>\n          <div className=\"col-xs-6\" id=\"n-quote\">\n            <button className=\"btn btn-default\" id=\"new-quote\" onClick={this.changeQuote}>\n              <i className=\"fa fa-info-circle\"></i> New Quote</button>\n          </div>\n        </div>\n      </div>\n    )\n  }\n}\n//ReactDOM.render(<RandCom/>, document.getElementById('root'));\n\nexport default RandCom;\n\n\n\n\n\n/*function App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <h1> Hello React!</h1>\n        <p>Current React Version: {React.version}</p>\n        </header>\n    </div>\n  );\n}\n\nexport default App;\n\n//<img src={logo} className=\"App-logo\" alt=\"logo\" />\n        /*<p>\n          Edit <code>src/App.js</code> and save to reload.\n        </p>\n        <a\n          className=\"App-link\"\n          href=\"https://reactjs.org\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n        >\n          Learn React\n        </a>*/\n      ","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport RandCom from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<RandCom/>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}